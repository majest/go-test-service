// Code generated by protoc-gen-go.
// source: strings.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	strings.proto

It has these top-level messages:
	CountRequest
	CountReply
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// The count request contains one parameter.
type CountRequest struct {
	A string `protobuf:"bytes,1,opt,name=a" json:"a,omitempty"`
}

func (m *CountRequest) Reset()                    { *m = CountRequest{} }
func (m *CountRequest) String() string            { return proto.CompactTextString(m) }
func (*CountRequest) ProtoMessage()               {}
func (*CountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The count response contains the result of the calculation.
type CountReply struct {
	V int64 `protobuf:"varint,1,opt,name=v" json:"v,omitempty"`
}

func (m *CountReply) Reset()                    { *m = CountReply{} }
func (m *CountReply) String() string            { return proto.CompactTextString(m) }
func (*CountReply) ProtoMessage()               {}
func (*CountReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*CountRequest)(nil), "pb.CountRequest")
	proto.RegisterType((*CountReply)(nil), "pb.CountReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for Strings service

type StringsClient interface {
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountReply, error)
}

type stringsClient struct {
	cc *grpc.ClientConn
}

func NewStringsClient(cc *grpc.ClientConn) StringsClient {
	return &stringsClient{cc}
}

func (c *stringsClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := grpc.Invoke(ctx, "/pb.Strings/Count", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Strings service

type StringsServer interface {
	Count(context.Context, *CountRequest) (*CountReply, error)
}

func RegisterStringsServer(s *grpc.Server, srv StringsServer) {
	s.RegisterService(&_Strings_serviceDesc, srv)
}

func _Strings_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(StringsServer).Count(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Strings_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Strings",
	HandlerType: (*StringsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _Strings_Count_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 125 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x2e, 0x29, 0xca,
	0xcc, 0x4b, 0x2f, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x92, 0xe1,
	0xe2, 0x71, 0xce, 0x2f, 0xcd, 0x2b, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0xe2, 0xe1,
	0x62, 0x4c, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x62, 0x4c, 0x54, 0x92, 0xe2, 0xe2, 0x82,
	0xca, 0x16, 0xe4, 0x54, 0x82, 0xe4, 0xca, 0xc0, 0x72, 0xcc, 0x41, 0x8c, 0x65, 0x46, 0x66, 0x5c,
	0xec, 0xc1, 0x10, 0xe3, 0x84, 0xb4, 0xb9, 0x58, 0xc1, 0xca, 0x84, 0x04, 0xf4, 0x0a, 0x92, 0xf4,
	0x90, 0xcd, 0x93, 0xe2, 0x43, 0x12, 0x01, 0x9a, 0xa1, 0xc4, 0x90, 0xc4, 0x06, 0xb6, 0xdc, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x0f, 0x45, 0x61, 0x8d, 0x00, 0x00, 0x00,
}
